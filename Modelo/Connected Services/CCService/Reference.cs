//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CC.CCService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CCService.ICandyCrushService")]
    public interface ICandyCrushService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/login", ReplyAction="http://tempuri.org/ICandyCrushService/loginResponse")]
        bool login(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/login", ReplyAction="http://tempuri.org/ICandyCrushService/loginResponse")]
        System.Threading.Tasks.Task<bool> loginAsync(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/register", ReplyAction="http://tempuri.org/ICandyCrushService/registerResponse")]
        bool register(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/register", ReplyAction="http://tempuri.org/ICandyCrushService/registerResponse")]
        System.Threading.Tasks.Task<bool> registerAsync(string user, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/setScore", ReplyAction="http://tempuri.org/ICandyCrushService/setScoreResponse")]
        void setScore(int score, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/setScore", ReplyAction="http://tempuri.org/ICandyCrushService/setScoreResponse")]
        System.Threading.Tasks.Task setScoreAsync(int score, string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/subscribe", ReplyAction="http://tempuri.org/ICandyCrushService/subscribeResponse")]
        void subscribe(System.Action<int> f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICandyCrushService/subscribe", ReplyAction="http://tempuri.org/ICandyCrushService/subscribeResponse")]
        System.Threading.Tasks.Task subscribeAsync(System.Action<int> f);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICandyCrushServiceChannel : CC.CCService.ICandyCrushService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CandyCrushServiceClient : System.ServiceModel.ClientBase<CC.CCService.ICandyCrushService>, CC.CCService.ICandyCrushService {
        
        public CandyCrushServiceClient() {
        }
        
        public CandyCrushServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CandyCrushServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CandyCrushServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CandyCrushServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool login(string user, string pass) {
            return base.Channel.login(user, pass);
        }
        
        public System.Threading.Tasks.Task<bool> loginAsync(string user, string pass) {
            return base.Channel.loginAsync(user, pass);
        }
        
        public bool register(string user, string pass) {
            return base.Channel.register(user, pass);
        }
        
        public System.Threading.Tasks.Task<bool> registerAsync(string user, string pass) {
            return base.Channel.registerAsync(user, pass);
        }
        
        public void setScore(int score, string user) {
            base.Channel.setScore(score, user);
        }
        
        public System.Threading.Tasks.Task setScoreAsync(int score, string user) {
            return base.Channel.setScoreAsync(score, user);
        }
        
        public void subscribe(System.Action<int> f) {
            base.Channel.subscribe(f);
        }
        
        public System.Threading.Tasks.Task subscribeAsync(System.Action<int> f) {
            return base.Channel.subscribeAsync(f);
        }
    }
}
